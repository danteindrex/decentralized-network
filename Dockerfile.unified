# Unified Multi-Stage Dockerfile for Decentralized vLLM Inference Network
# Optimized for build speed and layer caching

# =============================================================================
# Python Base Stage
# =============================================================================
FROM python:3.9-slim as python-base

# Install system dependencies
RUN apt-get update && apt-get install -y curl git build-essential && rm -rf /var/lib/apt/lists/*

# Set up virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# =============================================================================
# Node.js Dependencies Stage
# =============================================================================
FROM node:18-slim as node-deps

WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci --only=production

# =============================================================================
# Python Dependencies Stage
# =============================================================================
FROM python-base as python-deps

WORKDIR /app

# Copy requirements files
COPY orchestrator/requirements.txt ./orchestrator/
COPY streamlit_requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r orchestrator/requirements.txt
RUN pip install --no-cache-dir -r streamlit_requirements.txt

# =============================================================================
# Production Base Stage
# =============================================================================
FROM python-base as production-base

WORKDIR /app

# Copy dependencies from previous stages
COPY --from=node-deps /app/node_modules ./node_modules
COPY --from=python-deps /opt/venv /opt/venv

# Copy necessary project files
COPY package*.json ./
COPY hardhat.config.js ./
COPY .env.example ./

# Set environment variables
ENV NODE_ENV=production
ENV PYTHONPATH=/app
ENV PATH="/opt/venv/bin:$PATH"

# Create necessary directories
RUN mkdir -p logs model_cache data

# =============================================================================
# Source Code Stage
# =============================================================================
FROM production-base as source

# Copy all source code
COPY . .

# =============================================================================
# Bootstrap Node
# =============================================================================
FROM source as bootstrap

EXPOSE 30303 8080 8545
HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1
CMD ["node", "nodes/bootstrap/bootstrap-node.js"]

# =============================================================================
# Worker Node
# =============================================================================
FROM source as worker

# Install worker-specific dependencies
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip install --no-cache-dir vllm ray

EXPOSE 8000 8001
HEALTHCHECK CMD curl -f http://localhost:8001/health || exit 1
CMD ["node", "nodes/worker/worker-node.js"]

# =============================================================================
# Model Owner
# =============================================================================
FROM source as owner

EXPOSE 8002
HEALTHCHECK CMD curl -f http://localhost:8002/health || exit 1
CMD ["python", "orchestrator/owner_upload.py", "--server"]

# =============================================================================
# Orchestrator
# =============================================================================
FROM source as orchestrator

# Install orchestrator-specific dependencies
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip install --no-cache-dir vllm ray transformers

EXPOSE 8000 8546
HEALTHCHECK CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1
CMD ["python", "orchestrator/main.py"]

# =============================================================================
# Streamlit UI
# =============================================================================
FROM source as streamlit

EXPOSE 8501
HEALTHCHECK CMD curl -f http://localhost:8501/_stcore/health || exit 1
CMD ["streamlit", "run", "streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]

# =============================================================================
# Mobile Server
# =============================================================================
FROM source as mobile

RUN apt-get update && apt-get install -y nginx && rm -rf /var/lib/apt/lists/*
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 8081
HEALTHCHECK CMD curl -f http://localhost:8081/health || exit 1
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# Contract Deployer
# =============================================================================
FROM source as deployer

RUN npm install -g hardhat
HEALTHCHECK CMD test -f deployment.json || exit 1
CMD ["npm", "run", "deploy:docker"]

# =============================================================================
# All-in-One
# =============================================================================
FROM source as all-in-one

# Install all dependencies
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip install --no-cache-dir vllm ray transformers
RUN apt-get update && apt-get install -y nginx supervisor && rm -rf /var/lib/apt/lists/*

# Copy supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

EXPOSE 8000 8001 8002 8080 8501 8545 8546 30303
HEALTHCHECK CMD supervisorctl status | grep -q "RUNNING" || exit 1
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]